/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "MKL25Z4.h"
#include <stdio.h>
#include <string.h>
#include <stdint.h>

#define MAX_DATA_SIZE 50


void UART0_init(void);
void LED_init(void);
void LED_set(uint8_t value);

void get_temperature(void);
void set_speed(void);
void set_LPM(void);

void jump();

uint8_t rxdata[30];
uint8_t *rx;


uint8_t g , h, j, m, p;
int FIRST, i, z;
int CheckSum = 0, error = 0;




void get_temperature(void)
{
  m=4;
}


void set_speed(void)
{
  m=5;
}


void set_LPM(void)
{

	m=6;

}





typedef enum Cmds_t {
	GET_TEMP = 0x01,
	SET_SPEED= 0x02,
	LED_CONFIG= 0x03,
	SET_LPM = 0x04,
	} Cmds;

	typedef struct CI_Msg_t{
		Cmds command;
	uint8_t length;
	uint8_t data[MAX_DATA_SIZE];
	uint16_t checksum;
	} CI_Msg;


CI_Msg ci_msg;


	void jump(void)
	{
		for (z= 0; z < rxdata[1]-1 ; z++)
		{
			CheckSum += rxdata[z];
		}




		if( CheckSum == ci_msg.checksum)
		{
		if (ci_msg.command == GET_TEMP)
						{
							get_temperature();
						}

				else if (ci_msg.command == SET_SPEED)
						{
							set_speed();
						}
				else if (ci_msg.command == LED_CONFIG)
						{

					        j = rxdata[2];

							LED_set(j);
						}
				else if (ci_msg.command ==SET_LPM)
						{
							set_LPM();
						}

		}

		else error = 1;
	}



	void UART0_IRQHandler(void)
	{

	uint8_t c;
	c = UART0->D; /* read the char received */


	if (FIRST == 1)
	{

    if( c >= 0x30 && c <= 0x39)
    {
	g = c - 0x30;
	g = g*16;
    }

    else if ( c >= 0x41 && c <= 0x46 )
    {
    g = c - 0x37;
    g = g*16;
    }

    else if ( c >= 0x61 && c <= 0x66 )
    {
    g = c - 0x57;
    g = g*16;
    }

    FIRST = FIRST + 1;
	}

	else if (FIRST == 2)
	{
		uint8_t h;

		 if( c >= 0x30 && c <= 0x39)
		    {
			h = c - 0x30;
		    }

		    else if ( c >= 0x41 && c <= 0x46 )
		    {
		    h = c - 0x37;
		    }

		    else if ( c >= 0x61 && c <= 0x66 )
		    {
		    h = c - 0x57;
		    }

		 g = g + h;

		 if( i == 0 )
		 {
		 *(rx + i) = g;
		 i = i + 1;
		 FIRST = 1;
		 }

		 else if( i == 1)
		 {
		 *(rx + i) = g;
		 i = i + 1;
		 FIRST = 1;
		 }

		 else if ( i >= 2 && i < rxdata[1])
		 {
		 *(rx + i) = g;
		 i = i+1;

		 if ( i <= rxdata[1] - 1)
		 {
			 FIRST = 1;
		 }

		 else
			 {__disable_irq();

			 ci_msg.command = rxdata[0];
			 ci_msg.length = rxdata[1];
			 int t = 2, l= 0;

			 for ( p = rxdata[1]; p >= 4; p-- )
			 {
				 ci_msg.data[l] = rxdata[t];
			   	 t++;
			   	 l++;
			 }

			 ci_msg.checksum = rxdata[t];


		       jump();
			 }
		 }
	    }

	}










    void UART0_init(void)
	{
		SIM->SCGC4 |= 0x0400; /* enable clock for UART0 */
		SIM->SOPT2 |= 0x04000000; /* use FLL output for UART Baud rategenerator */
		UART0->C2 = 0; /* turn off UART0 while changing configurations */
		UART0->BDH = 0x00;
		UART0->BDL = 0x17; /* 115200 Baud */
		UART0->C4 = 0x0F; /* Over Sampling Ratio 16 */
		UART0->C1 = 0x00; /* 8-bit data */
		UART0->C2 = 0x2C; /* enable receive and receive interrupt*/
		NVIC->ISER[0] |= 0x00001000; /* enable INT12 (bit 12 of ISER[0]) */
		SIM->SCGC5 |= 0x0200; /* enable clock for PORTA */
		PORTA->PCR[1] = 0x0200; /* make PTA1 UART0_Rx pin */
	}


    void LED_init(void)
    {
    	SIM->SCGC5 |= 0x400; /* enable clock to Port B */
    		SIM->SCGC5 |= 0x1000; /* enable clock to Port D */
    		PORTB->PCR[18] = 0x100; /* make PTB18 pin as GPIO */
    		PTB->PDDR |= 0x40000; /* make PTB18 as output pin */
    		PTB->PSOR = 0x40000; /* turn off red LED */
    		PORTB->PCR[19] = 0x100;
    		PTB->PDDR |= 0x80000; /* make PTB19 as output pin */
    		PTB->PSOR = 0x80000; /* turn off green LED */
    		PORTD->PCR[1] = 0x100; /* make PTD1 pin as GPIO */
    		PTD->PDDR |= 0x02; /* make PTD1 as output pin */
    		PTD->PSOR = 0x02; /* turn off blue LED */
    }


    void LED_set(uint8_t value)
    {

    	if (value == 0x01) /* use bit 0 of value to control red LED */  /*black*/
        {
    		PTB->PSOR = 0xC0000;
    		PTD->PSOR = 0x02;
        } /* turn off red LED */


    	if (value == 0x02) /* use bit 0 of value to control red LED */  /*red*/
    	{
    		PTB->PCOR = 0x40000;
    		PTB->PSOR = 0x80000;
    		PTD->PSOR = 0x02;
    	}

        if (value == 0x03) /* use bit 0 of value to control red LED */  /*green*/
    	{
        	PTB->PSOR = 0x40000;
    		PTB->PCOR = 0x80000;
    		PTD->PSOR = 0x02;
    	}

        if (value == 0x04) /* use bit 0 of value to control red LED */  /*blue*/
    	{
        	PTB->PSOR = 0xC0000;
    		PTD->PCOR = 0x02;
    	}

        if (value == 0x05) /* use bit 0 of value to control red LED */  /*blue*/
    	{
        	PTB->PCOR = 0xC0000;
    		PTD->PSOR = 0x02;
    	}

        if (value == 0x06) /* use bit 0 of value to control red LED */  /*blue*/
    	{
        	PTB->PCOR = 0x40000;
    		PTB->PSOR = 0x80000;
    	    PTD->PCOR = 0x02;
    	}

        if (value == 0x07) /* use bit 0 of value to control red LED */  /*blue*/
    	{PTB->PSOR = 0x40000;
    	 PTB->PCOR = 0x80000;
    	 PTD->PCOR = 0x02;
    	}

        if (value == 0x08) /* use bit 0 of value to control red LED */  /*blue*/
    	{
        	PTB->PCOR = 0xC0000;
    		PTD->PCOR = 0x02;
    	}

   }



	int main(void)
{


		FIRST = 1;
         i = 0;
         rx = rxdata;

		 __disable_irq(); /* global disable IRQs */
		UART0_init();
	    LED_init();
		__enable_irq(); /* global enable IRQs */



	while(1)
	{
	}


}















